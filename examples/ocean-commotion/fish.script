go.property("color", hash("yellow"))
go.property("type", hash("plain"))
go.property("blink", 0)

local emthree = require "emthree.emthree"
local block_color = require "examples.ocean-commotion.color"
local block_type = require "examples.ocean-commotion.type"


local normal_scale = 0.45		-- The normal render size
local zoomed_scale = 0.6		-- When interacted with, zoom to this

local colors = {
	[block_color.YELLOW] = "yellow",
	[block_color.BLUE] = "blue",
	[block_color.ORANGE] = "orange",
	[block_color.PURPLE] = "purple",
	[block_color.GREEN] = "green",
	[block_color.RED] = "red"
}

local function change_sprite(id)
	sprite.play_flipbook("#sprite", id)
end

local function change_eyes(id)
	sprite.play_flipbook("#sprite-eyes", id)
end

local function blink(self)
	local t
	if self.blinking then
		t = math.random() / 5 + 0.1
	else
		t = math.random(4) + 3
	end
	go.animate("#", "blink", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, t, 0, function(self)
		if not self.blinking then
			msg.post("#sprite-eyes", "disable")
		else
			msg.post("#sprite-eyes", "enable")
		end
		self.blinking = not self.blinking
		blink(self)
	end)
end

local function update_sprites(self)
	particlefx.stop("#explosion")
	msg.post("#sprite", "enable")
	msg.post("#sprite-eyes", "enable")
	local c = colors[self.color]
	local e = colors[self.color]
	if self.type == block_type.BLOCKER then
		msg.post("#sprite-eyes", "disable")
		e = "eyes-" .. e
		c = "fish-bones"
	elseif self.type == block_type.STRIPED_H then
		e = "eyes-" .. e
		c = "fish-" .. c .. "-h"
	elseif self.type == block_type.STRIPED_V then
		e = "eyes-" .. e
		c = "fish-" .. c .. "-v"
	elseif self.type == block_type.WRAPPED then
		msg.post("#sprite-eyes", "disable")
		go.cancel_animations("#", "blink")
		e = "eyes-" .. e
		c = "fish-" .. c .. "-w"
	elseif self.type == block_type.BOMB then
		e = "eyes-starfish"
		c = "fish-starfish"
	else
		e = "eyes-" .. c
		c = "fish-" .. c
	end
	change_sprite(hash(c))
	change_eyes(hash(e))
end


function init(self)
	-- store original rotation
	--
	self.rot = go.get_rotation()

	-- Render scaled down since atlas graphics is too large.
	-- An alternative is to scale down the source material but working with
	-- higher res images will show its benefits on retina screens.
	--
	go.set_scale(normal_scale)
	msg.post("#", "sway")
	update_sprites(self)

	self.blinking = false
	blink(self)
end


function on_message(self, message_id, message, sender)
	if message_id == emthree.CHANGE then
		self.color = message.color or block_color.YELLOW
		self.type = message.type or block_type.PLAIN
		update_sprites(self)
	elseif message_id == hash("sway") then
		local rot = go.get(".", "euler.z")
		go.set(".", "euler.z", rot - 1)
		local t = (math.random() * 2) + 2
		go.cancel_animations(".", "euler.z")
		go.animate(".", "euler.z", go.PLAYBACK_LOOP_PINGPONG, rot + 1, go.EASING_INOUTQUAD, t)
	elseif message_id == emthree.PRESSED then
		--
		-- Play a simple effect used to signal that we are
		-- interacting with the fish.
		--
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, zoomed_scale, go.EASING_INOUTSINE, 0.1)
		local rot = go.get(".", "euler.z")
		local r = math.random() / 50
		go.cancel_animations(".", "euler.z")
		go.animate(".", "euler.z", go.PLAYBACK_LOOP_PINGPONG, rot - 4, go.EASING_INOUTSINE, 0.1 + r)
	elseif message_id == emthree.RELEASED then
		--
		-- Reset the fish, meaning that we stop animation and
		-- go back to normal scaling.
		--
		go.cancel_animations(".", "scale")
		go.animate(".", "scale", go.PLAYBACK_ONCE_FORWARD, normal_scale, go.EASING_INOUTSINE, 0.1)
		go.cancel_animations(".", "euler.z")
		go.set_rotation(self.rot)
		msg.post("#", "sway")
	elseif message_id == emthree.REMOVE then
		--
		-- This fish is being removed from the board.
		-- Go out with a bang!
		--
		particlefx.play("#explosion")
		--
		-- Remove
		--
		go.delete()
	end
end
